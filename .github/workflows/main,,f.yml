name: RDP Gaming Server Windows Server (Fake RTX 3060 WARP Optimized)

on:
  workflow_dispatch:

jobs:
  rdp-gaming:
    runs-on: windows-2022
    timeout-minutes: 4320 # max 72h

    steps:
      - name: Activeaza Fake RTX 3060 GPU (WARP Optimized)
        run: |
          Write-Host "Activare GPU Fake RTX 3060 cu WARP optimizat"
          # Fortam WARP
          reg add "HKCU\Software\Microsoft\Direct3D" /v "ForceWarp" /t REG_DWORD /d 1 /f
          # Fake GPU info
          reg add "HKLM\Software\FakeGPU" /v "Name" /t REG_SZ /d "NVIDIA GeForce RTX 3060" /f
          reg add "HKLM\Software\FakeGPU" /v "VRAM_MB" /t REG_DWORD /d 12288 /f
          reg add "HKLM\Software\FakeGPU" /v "DriverVersion" /t REG_SZ /d "546.33" /f
          reg add "HKLM\Software\FakeGPU" /v "CUDA" /t REG_SZ /d "8.6" /f
          reg add "HKLM\Software\FakeGPU" /v "RayTracing" /t REG_SZ /d "Supported" /f
          # Seteaza schema de energie pe High Performance
          powercfg /setactive SCHEME_MIN
          # Optimizeaza timer resolution pentru FPS mai mari
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Kernel" /v "GlobalTimerResolutionRequests" /t REG_DWORD /d 1 /f
          Write-Host "GPU Fake RTX 3060 activat si WARP optimizat"

      - name: Verificare GPU raportat
        run: |
          dxdiag /t dxdiag_output.txt
          Get-Content dxdiag_output.txt | Select-String "Card name","Display Memory","Driver Version"

      - name: Activeaza Remote Desktop
        run: |
          Set-ItemProperty 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP-Allow" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Creeaza useri cu parole random
        run: |
          Add-Type -AssemblyName System.Security
          function GenPass { -join ((33..126) | Get-Random -Count 16 | % {[char]$_}) }
          $users = @("RTXuser","runneradmin")
          foreach ($u in $users) {
            if (Get-LocalUser -Name $u -ErrorAction SilentlyContinue) { Remove-LocalUser -Name $u }
            $p = GenPass
            $sp = ConvertTo-SecureString $p -AsPlainText -Force
            New-LocalUser -Name $u -Password $sp -AccountNeverExpires
            Add-LocalGroupMember -Group Administrators -Member $u
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u
            echo "${u}_USER=$u" >> $env:GITHUB_ENV
            echo "${u}_PASS=$p" >> $env:GITHUB_ENV
          }

      - name: Instaleaza Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i","`"$installerPath`"","/quiet","/norestart" -Wait
          Remove-Item $installerPath -Force
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-server-$env:GITHUB_RUN_ID

      - name: Afiseaza datele de conectare
        run: |
          Write-Host "=== INFORMATII ACCES RDP ==="
          Write-Host "GPU Fake: NVIDIA GeForce RTX 3060 (WARP Software)"
          Write-Host "User1: $env:RTXuser_USER / Pass: $env:RTXuser_PASS"
          Write-Host "User2: $env:runneradmin_USER / Pass: $env:runneradmin_PASS"
          Write-Host "============================"
          
